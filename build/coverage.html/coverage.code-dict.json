{"/home/travis/build/npmtest/node-npmtest-gramophone/test.js":"/* istanbul instrument in package npmtest_gramophone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gramophone/lib.npmtest_gramophone.js":"/* istanbul instrument in package npmtest_gramophone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gramophone = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gramophone = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gramophone/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gramophone && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gramophone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gramophone\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gramophone.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gramophone.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gramophone.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gramophone.__dirname + '/lib.npmtest_gramophone.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gramophone/node_modules/gramophone/index.js":"var _ = require('lodash');\nvar natural = require('natural');\nvar util = require('util');\nvar stopWords = require('./stopwords.json');\nvar es = require('event-stream');\nvar Stream = require('stream');\nvar stripTags = require('underscore.string').stripTags;\n\n// Extract the most frequently used phrases from the text.\nexports.extract = function(text, options){\n  var results = [];\n  var keywords = {};\n  var combined, combinedResults = {};\n  var unstemmed = {};\n\n  var stem = function(word){\n    // only bother stemming if the word will be used\n    if (!usePhrase(word, options)) return word;\n    var stem = natural.PorterStemmer.stem(word);\n    // Store the shortest word that matches this stem for later destemming\n    if (!unstemmed.hasOwnProperty(stem) || word.length < unstemmed[stem].length){\n      unstemmed[stem] = word;\n    }\n    return stem;\n  };\n\n  var destem = function(stem){\n    return unstemmed[stem];\n  };\n\n  if (!text) return [];\n  if (typeof text !== 'string') text = text.toString();\n  \n  if (!options) options = {};\n  if (!options.ngrams){\n    options.ngrams = [1, 2, 3];\n  }else if (typeof options.ngrams === 'number'){\n    options.ngrams = [options.ngrams];\n  }\n  if (!options.cutoff) options.cutoff = 0.5;\n  if (!options.min) options.min = 2; \n  if (!options.stopWords) options.stopWords = [];\n  if (!options.startWords) options.startWords = [];\n  if (options.html){\n    text = stripTags(text);\n  }\n\n  // For each ngram, extract the most frequent phrases (taking into account\n  // stop and start words lists)\n  _.each(options.ngrams, function(ngram){\n    var keywordsForNgram;\n    var tf = new Tf();\n    var tokenized = _.map(natural.NGrams.ngrams(text, ngram), function(ngram){\n      if (options.stem){\n        ngram = _.map(ngram, stem);\n      }\n      return ngram.join(' ').toLowerCase();\n    });\n    tf.addDocument(tokenized);\n    keywordsForNgram = tf.listMostFrequestTerms(0);\n    keywordsForNgram = _.select(keywordsForNgram, function(item){\n      return usePhrase(item.term, options);\n    });\n    results = results.concat(keywordsForNgram);\n  });\n\n  // Convert results to a hash\n  _.each(results, function(result){\n    combinedResults[result.term] = result.tf;\n  });\n  \n  // Combine results from each ngram to remove redundancy phrases\n  combined = exports.combine(combinedResults, options.cutoff);\n  \n  // Convert to a list of objects sorted by tf (term frequency)\n  combined = _.chain(combined) \n    .pairs()\n    .sortBy(_.last)\n    .reverse()\n    .map(function(combination){ return {term: combination[0], tf: combination[1] }; })\n    .value();\n  \n  // Only return results over a given frequency (default is 2 or more)\n  if (options.min){\n    combined = _.select(combined, function(result){\n      return result.tf >= options.min;\n    });\n  }\n\n  // If stemming was used, remap words back\n  if (options.stem){\n    combined.forEach(function(result){\n      result.term = _.map(result.term.split(' '), destem).join(' ');\n    });\n  }\n\n  if (options.flatten){\n    // Flatten the results so that there is a list item for every occurence of\n    // the term\n    combined = _.flatten(\n      _.map(combined, function(result){\n        var flattened = [];\n        for (var i=0; i < result.tf; i++){\n          flattened.push(result.term);\n        }\n        return flattened;\n      })\n    );\n  }else{\n    // Return results with scores or without depending on options\n    combined =  options.score ? combined : _.pluck(combined, 'term');\n  }\n\n  \n  // Limit the results\n  if (options.limit){\n    combined = combined.slice(0, options.limit);\n  }\n\n  return combined;\n};\n\n// Text stream. Reads a text stream and emits keywords. Warning: this stream \n// behaves like a sink and will buffer all data until the source emits end.\nexports.stream = function(options){\n  return new exports.TextStream(options);\n};\n\nexports.TextStream = function(options){\n  this.options = options;\n  this.readable = true;\n  this.writable = true;\n  this.buffer = [];\n};\n\nutil.inherits(exports.TextStream, Stream);\n\nexports.TextStream.prototype.write = function(data){\n  this.buffer.push(data);\n};\n\nexports.TextStream.prototype.end = function(data){\n  var stream = this;\n  if (data) this.write(data);\n  exports.extract(this.buffer.join(''), this.options).forEach(function(phrase){\n    stream.emit('data', phrase);\n  });\n  stream.emit('end');\n};\n\n// Transform stream. Reads a stream and emits keywords. If options.from is set\n// it will read from the from property. If options.to is set, it will write the\n// keywords to this property and return the object\nexports.transformStream = function(options){\n  if (!options) options = {};\n\n  return es.through(function write(data){\n    var from = options.from;\n    var text = from && data.hasOwnProperty(from) ? data[from] : data;\n    var keywords = exports.extract(text, options);\n    if (options.to){\n      data[options.to] = keywords;\n      this.emit('data', data);\n    }else{\n      this.emit('data', keywords);\n    }\n  });\n  \n};\n\n// Attempt to combine the results for different ngrams in order to work out\n// whether we should use \"national broadband network\", rather than \"national\n// broadband\" and \"broadband network\". In this example with a cutoff of .2,\n// if the longer phrase (ngram of 3) was used 20 times, and \"broadband network\"\n// was used 22 times (within the cutoff of 20 * 0.2), then it would be removed\n// from the results. If \"national broadband\" was used more than the cutoff,\n// e.g. 30 times, it would be left in the results.\nexports.combine = function(phrases, cutoff){\n  var combined = _.clone(phrases);\n\n  _.each(_.keys(phrases), function(phrase){\n    var ngramToTry, subPhrases;\n    ngramToTry = phrase.split(' ').length - 1;\n\n    if (ngramToTry < 1) return;\n\n    _.each(natural.NGrams.ngrams(phrase, ngramToTry), function(ngram){\n      var subPhrase = ngram.join(' ');\n      if (phrases[subPhrase]){\n        if (!cutoff || (phrases[phrase] / phrases[subPhrase]) >= (1 - cutoff)){\n          delete combined[subPhrase];\n        }\n      }\n    });\n  });\n\n  return combined;\n};\n\nvar Tf = function(){\n  natural.TfIdf.call(this);\n};\n\nutil.inherits(Tf, natural.TfIdf);\n\nTf.prototype.listMostFrequestTerms = function(d) {\n  var terms = [];\n  for(var term in this.documents[d]) {\n    terms.push({term: term, tf: natural.TfIdf.tf(term, this.documents[d])});\n  }\n  return terms.sort(function(x, y) { return y.tf - x.tf; });\n};\n\nfunction whitelisted(term, startWords){\n  return startWords.indexOf(term) !== -1;\n}\n\nfunction blacklisted(term, extraStopWords){\n  if (term.match(/^\\d+$/) || term.match(/^_/)){\n    return true;\n  }\n  return  _.indexOf(stopWords, term) !== -1 ||\n    _.indexOf(extraStopWords, term) !== -1;\n}\n\nfunction usePhrase(phrase, options){\n  return whitelisted(phrase, options.startWords) || \n    !_.detect(phrase.split(' '), function(term){\n      return blacklisted(term, options.stopWords);\n    });\n}\n\n","/home/travis/build/npmtest/node-npmtest-gramophone/node_modules/gramophone/tfidf.js":"var natural = require('natural'),\n  TfIdf = natural.TfIdf,\n  tfidf = new TfIdf();\n\nvar gramaphone = require('./');\n\nvar docs = [\n  'this document is about node programming language.',\n  'this document is about ruby programming language.',\n  'this document is about the ruby programming language and node programming language.',\n  'this document is about node programming language. it has node programming language examples'\n];\n\ndocs.forEach(function(doc, index){\n  var ngrams = gramaphone.extract(doc, { min: 1 , flatten: true});\n  console.error('ngrams for doc ' + index + ':');\n  console.error(ngrams);\n  tfidf.addDocument(ngrams);\n});\n\nconsole.log('node programming language -----------');\ntfidf.tfidfs(['node programming language'], function(i, measure) {\n  console.log('document #' + i + ' is ' + measure);\n});\n\n/*\nconsole.log('\"document\" --------------------------------');\ntfidf.tfidfs('\"document\"', function(i, measure) {\n  console.log('document #' + i + ' is ' + measure);\n});\n*/\n","/home/travis/build/npmtest/node-npmtest-gramophone/node_modules/gramophone/misc/substack.js":"var request = require('request');\nvar gramophone = require('./');\nvar JSONStream = require('JSONStream');\nvar es = require('event-stream');\n\n// Find the two most used phrases consisting of two words (ngrams).\n/*\nrequest('https://github.com/substack/stream-handbook/blob/master/readme.markdown')\n  .pipe(gramophone.stream({ngrams: [2], html: true, limit: 2}))\n  .on('data', console.error.bind(console));\n  */\n\nvar parser = JSONStream.parse(['rows', true, 'doc']),\n  req = request({url: 'http://isaacs.couchone.com/registry/_all_docs?include_docs=true'}),\n  gramophone = gramophone.transformStream({ngrams: [2,3], minFrequency: 2, from: 'readme', to: 'readmeKeywords'})\n  logger = es.mapSync(function (data) {\n    if (data.readmeKeywords.length){\n      console.error(data.readmeKeywords);\n    }\n    return data;\n   });\n\nreq.pipe(parser)\n  .pipe(gramophone)\n  .pipe(logger);\n"}